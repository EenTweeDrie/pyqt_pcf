import os

from PyQt6 import QtCore, QtWidgets
from PyQt6.QtWidgets import (QHBoxLayout, QListWidget, QDockWidget,
                             QListWidgetItem, QCheckBox, QVBoxLayout, QWidget, QPushButton, QLabel, QStackedWidget, QComboBox, QGroupBox, QFormLayout)
from PyQt6.QtCore import Qt, QUrl
from PyQt6.QtGui import QDragEnterEvent, QDropEvent, QFont, QPixmap

from point_cloud_widget import OpenGLWidget
from config import base_path

# –ü—Ä–∏–º–µ—Ä!!!
from Toolbar_Widgets import parameters_widget


class EmptyStateWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å drag and drop –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""

    def __init__(self, main_window=None, parent=None):
        super().__init__(parent)
        self.main_window = main_window
        self.setAcceptDrops(True)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setAlignment(Qt.AlignmentFlag.AlignCenter)

        # –ò–∫–æ–Ω–∫–∞ —Ñ–∞–π–ª–∞
        icon_label = QLabel()
        icon_path = os.path.join(base_path, "images", "generated-image(3).png")
        pixmap = QPixmap(icon_path)
        if not pixmap.isNull():
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –¥–æ —Ä–∞–∑–º–µ—Ä–∞ 72x72 –ø–∏–∫—Å–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            scaled_pixmap = pixmap.scaled(72, 72, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation)
            icon_label.setPixmap(scaled_pixmap)
        else:
            # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback
            icon_label.setText("üìÅ")
            icon_font = QFont()
            icon_font.setPointSize(72)
            icon_label.setFont(icon_font)

        icon_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å—Ç–∏–ª—å
        icon_label.setStyleSheet("color: rgba(136, 136, 136, 0.3); opacity: 0.3;")
        layout.addWidget(icon_label)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        main_label = QLabel("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞")
        main_font = QFont()
        main_font.setPointSize(18)
        main_font.setBold(True)
        main_label.setFont(main_font)
        main_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        main_label.setStyleSheet("color: #888888; margin: 20px 0px;")
        layout.addWidget(main_label)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        sub_label = QLabel("–∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ Ctrl+O")
        sub_font = QFont()
        sub_font.setPointSize(12)
        sub_label.setFont(sub_font)
        sub_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        sub_label.setStyleSheet("color: #777777; margin-bottom: 20px;")
        layout.addWidget(sub_label)

        # –§–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
        formats_label = QLabel("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n.las ‚Ä¢ .pcd ‚Ä¢ .laz ‚Ä¢ .h5 ‚Ä¢ .txt")
        formats_font = QFont()
        formats_font.setPointSize(10)
        formats_label.setFont(formats_font)
        formats_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        formats_label.setStyleSheet("color: #555555;")
        layout.addWidget(formats_label)

    def dragEnterEvent(self, event: QDragEnterEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if event.mimeData().hasUrls():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ–∞–π–ª—ã
            urls = event.mimeData().urls()
            valid_files = []

            for url in urls:
                if url.isLocalFile():
                    file_path = url.toLocalFile()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if file_path.lower().endswith(('.las', '.pcd', '.laz', '.h5', '.txt')):
                        valid_files.append(file_path)

            if valid_files:
                event.acceptProposedAction()
                return

        event.ignore()

    def dragMoveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏"""
        if event.mimeData().hasUrls():
            event.acceptProposedAction()
        else:
            event.ignore()

    def dropEvent(self, event: QDropEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–±—Ä–æ—Å–∞ —Ñ–∞–π–ª–æ–≤"""
        if event.mimeData().hasUrls() and self.main_window:
            urls = event.mimeData().urls()
            valid_files = []

            for url in urls:
                if url.isLocalFile():
                    file_path = url.toLocalFile()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if file_path.lower().endswith(('.las', '.pcd', '.laz', '.h5', '.txt')):
                        valid_files.append(file_path)

            if valid_files:
                self.main_window.add_files_to_list(valid_files)
                event.acceptProposedAction()
                print(f"–ü–µ—Ä–µ—Ç–∞—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(valid_files)}")
            else:
                print("–ù–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                event.ignore()
        else:
            event.ignore()


class DragDropListWidget(QListWidget):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π QListWidget —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π drag and drop"""

    def __init__(self, main_window=None, parent=None):
        super().__init__(parent)
        self.main_window = main_window
        self.setAcceptDrops(True)

    def dragEnterEvent(self, event: QDragEnterEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if event.mimeData().hasUrls():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ–∞–π–ª—ã
            urls = event.mimeData().urls()
            valid_files = []

            for url in urls:
                if url.isLocalFile():
                    file_path = url.toLocalFile()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if file_path.lower().endswith(('.las', '.pcd', '.laz', '.h5', '.txt')):
                        valid_files.append(file_path)

            if valid_files:
                event.acceptProposedAction()
                return

        event.ignore()

    def dragMoveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏"""
        if event.mimeData().hasUrls():
            event.acceptProposedAction()
        else:
            event.ignore()

    def dropEvent(self, event: QDropEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–±—Ä–æ—Å–∞ —Ñ–∞–π–ª–æ–≤"""
        if event.mimeData().hasUrls() and self.main_window:
            urls = event.mimeData().urls()
            valid_files = []

            for url in urls:
                if url.isLocalFile():
                    file_path = url.toLocalFile()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if file_path.lower().endswith(('.las', '.pcd', '.laz', '.h5', '.txt')):
                        valid_files.append(file_path)

            if valid_files:
                self.main_window.add_files_to_list(valid_files)
                event.acceptProposedAction()
                print(f"–ü–µ—Ä–µ—Ç–∞—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ —Å–ø–∏—Å–æ–∫: {len(valid_files)}")
            else:
                print("–ù–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                event.ignore()
        else:
            event.ignore()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowTitle("LIDAR segmentation and modeling")
        MainWindow.resize(2560, 1440)
        MainWindow.showMaximized()
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setProperty("class", "custom-widget")
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É –¥–ª—è centralwidget
        self.centralLayout = QVBoxLayout(self.centralwidget)
        self.centralLayout.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã

        self.openGLWidget = OpenGLWidget(parent=self.centralwidget)
        self.openGLWidget.setObjectName("openGLWidget")
        self.centralLayout.addWidget(self.openGLWidget)

        MainWindow.setCentralWidget(self.centralwidget)

        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # –°—Ç—ã–∫–æ–≤–æ—á–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
        self.addDockWidget(
            Qt.DockWidgetArea.LeftDockWidgetArea, self.files_dock_widget())
        self.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea,
                           self.properties_dock_widget())

    def update_list(self, list):
        list.clear()
        for file_name in self.openGLWidget.point_clouds:
            if self.openGLWidget.point_clouds[file_name]['active']:
                list.addItem(file_name)

    def init_dock_widgets(self):
        self.dock_widgets = {
            'parameters': parameters_widget.parameters_dock_widget(self)  # ‚Üê –Ω–∞—à –≤–∏–¥–∂–µ—Ç
        }

    def properties_dock_widget(self):
        dock = QDockWidget('–°–≤–æ–π—Å—Ç–≤–∞')
        dock.setAllowedAreas(QtCore.Qt.DockWidgetArea.AllDockWidgetAreas)
        widget = QWidget()
        main_layout = QVBoxLayout()

        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É "–°–≤–æ–π—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        display_group = QGroupBox("–°–≤–æ–π—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        display_layout = QFormLayout()

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã
        self.color_palette_combo = QComboBox()
        self.color_palette_combo.addItems([
            "Blue > Green > Yellow > Red",
            "Grey",
            "Viridis",
            "Brown > Yellow",
            "Yellow > Brown",
            "Topo landserf",
            "High contrast",
            "Cividis",
            "Blue > White > Red",
            "Red > Yellow"
        ])
        display_layout.addRow("–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞:", self.color_palette_combo)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—è —Ü–≤–µ—Ç–∞
        self.color_field_combo = QComboBox()
        self.color_field_combo.addItems([
            "intensity",
            "rgb",
            "z",
            "normals",
            "original_cloud_index",
            "gps_time",
            "illuminance"
        ])
        display_layout.addRow("–ü–æ–ª–µ —Ü–≤–µ—Ç–∞:", self.color_field_combo)

        display_group.setLayout(display_layout)
        main_layout.addWidget(display_group)

        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É "–°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞"
        file_group = QGroupBox("–°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞")
        file_layout = QFormLayout()
        file_group.setLayout(file_layout)
        main_layout.addWidget(file_group)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ layouts –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.properties_layout = main_layout
        self.file_properties_layout = file_layout

        widget.setLayout(main_layout)
        dock.setWidget(widget)
        return dock

    def files_dock_widget(self):
        dock = QDockWidget('–§–∞–π–ª—ã')
        dock.setAllowedAreas(Qt.DockWidgetArea.AllDockWidgetAreas)
        widget = QWidget()
        layout = QVBoxLayout()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É

        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
        buttons_layout = QHBoxLayout()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å—ë"
        self.select_all_button = QPushButton("–í—ã–±—Ä–∞—Ç—å –≤—Å—ë")
        self.select_all_button.setShortcut("Ctrl+A")
        self.select_all_button.setToolTip("Ctrl+A")
        buttons_layout.addWidget(self.select_all_button)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "Show/Hide"
        self.display_button = QPushButton("Show/Hide")
        self.display_button.setShortcut("Ctrl+R")
        self.display_button.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (Ctrl+R)")
        buttons_layout.addWidget(self.display_button)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
        self.remove_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        self.remove_button.setShortcut("Ctrl+D")
        self.remove_button.setToolTip("Ctrl+D")
        buttons_layout.addWidget(self.remove_button)

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É –∫–Ω–æ–ø–æ–∫ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É
        layout.addLayout(buttons_layout)

        # –°–æ–∑–¥–∞–µ–º QStackedWidget –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –ø—É—Å—Ç—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤
        self.files_stack = QStackedWidget()

        # –í–∏–¥–∂–µ—Ç –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.empty_state_widget = EmptyStateWidget(main_window=self)
        self.files_stack.addWidget(self.empty_state_widget)

        # QListWidget —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π drag and drop
        self.listWidget = DragDropListWidget(main_window=self)
        self.listWidget.setToolTip(
            "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã'\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .las, .pcd, .laz, .h5, .txt")
        self.files_stack.addWidget(self.listWidget)

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.files_stack.setCurrentWidget(self.empty_state_widget)

        layout.addWidget(self.files_stack)

        widget.setLayout(layout)
        dock.setWidget(widget)
        return dock

    def update_empty_list_message(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤"""
        if self.listWidget.count() == 0:
            self.files_stack.setCurrentWidget(self.empty_state_widget)

    def clear_empty_list_message(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã"""
        if self.listWidget.count() > 0:
            self.files_stack.setCurrentWidget(self.listWidget)

    def add_file_to_list_widget(self, file_path):
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞–∫–æ —Ç–æ—á–µ–∫ –∑–µ–º–ª–∏ –≤ list_widget
        ground_item = QListWidgetItem(self.listWidget)
        ground_checkbox = QCheckBox(os.path.basename(file_path))
        ground_checkbox.setChecked(True)
        ground_checkbox.setProperty("filePath", file_path)
        self.listWidget.setItemWidget(ground_item, ground_checkbox)
        ground_item.setSizeHint(ground_checkbox.sizeHint())
        ground_checkbox.stateChanged.connect(self.checkbox_changed)
